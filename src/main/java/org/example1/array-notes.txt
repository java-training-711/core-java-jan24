// array all elements are of same type

int[] arr; // array declaration
arr = new int[]{} // length = 0, as array is initialized empty
arr = new int[2]; // length = 2, array initialized with default values of int type
arr[0] = 10;
arr[1] = 20;

arr = new int[2]{30, 40} // initialized with user provided values

int[] arr1 = new int[]{} // array declaration + initialization with empty array
int[] arr2 = new int[2]{30, 300} // array declaration + initialization with user provided values
int[] arr3 = new int[]{50, 100, 200}
int[] arr4 = {10, 20, 30}
int[] arr4 = new int[2] // with default value of int type

// int is primtive type and its default value is zero
[0, 1, 2, 3, 4]
[0, 0, 0, 0, 0]
-------------------------------------------------------------------

int[][] arr = new int[3][2];
// 3 one dimensional array and each of them length is 2
// each 1d array initialized with default value of int type
[ [0, 0], [0, 0], [0, 0] ]

int[][] arr = new int[3][];
// 3 different one dimensional array and each of them length is unknown (not even zero)
/**
  anything other than primitive type is called reference type.
  default value of reference type is null

  the element in 2d array is 1d array.
  1d array is reference type.
  For this 1d array we dont know its length.

    [ [], [], [] ]
	[ null, null, null ]

**/

---------------------------------------------

int[] arr = {10, 20, 30};

arr[1] = 40;

Arrays.toString(arr); // 10, 40, 30
---------------------------------------------

/**
m1 index = 3, return , removed from top of the stack
m1 index = 2, this guy call again m1 with index = 3
m1 index = 1, this guy calls again m1 with index = 2
m1 index = 0, this guy calls again m1 with index = 1
main
**/


/**
m1 index = 3, return , removed from top of the stack
m1 index = 2, this guy call again m1 with index = 3, done
m1 index = 1, this guy calls again m1 with index = 2, done
m1 index = 0, this guy calls again m1 with index = 1, done
main
**/

main(){
  int[] items = {10, 20, 30};
  m1(items, index);
}

m1(int[] items, index){
  if(index == items.length){
   return;
  }
  sop(items[index])
  index = index+1;
  m1(items, index)
  sop(done);
}



